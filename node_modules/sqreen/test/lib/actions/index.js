/**
 * Copyright (c) 2016 - 2018 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Actions = require('../../../lib/actions/index');
const Record = require('../../../lib/instrumentation/record');

describe('Actions', () => {

    it('should enforce a blocking IP action', { plan: 10 }, (done) => {

        Actions.init();

        const req = {
            socket: {
                end() {}
            }
        };
        const res = {
            end () {},
            writeHead (code) {

                expect(code).to.equal(500);
            }
        };

        const list = Actions.enforceActionList([{ action_id: 1, action: 'block_ip', parameters: { ip_cidr: '192.168.0.1/24' } }]);

        expect(list).to.have.length(0);
        expect(Actions.shouldLetThisGo(req, res, '192.168.0.50')).to.be.false();

        const list2 = Actions.enforceActionList([{ action_id: 1, action: 'block_ip', parameters: { ip_cidr: '192.167.0.1/24' } }]);

        expect(list2).to.have.length(0);
        expect(Actions.shouldLetThisGo(req, res, '192.168.0.50')).to.be.true();


        const record = Record.lazyGet(req);

        expect(record.observed.sdk).to.have.length(1);
        const track = record.observed.sdk[0];
        expect(record.observed.sdk).to.have.length(1);

        expect(track.name).to.equal('track');
        expect(track.args[0]).to.equal('sq.action.block_ip');
        expect(track.args[1].properties).to.equal({
            action_id: 1,
            output: {
                ip_address: '192.168.0.50'
            }
        });

        done();
    });

    it('should enforce a blocking IP action for 2 seconds', { plan: 8, timeout: 5000 }, (done) => {

        Actions.init();

        const req = {
            socket: {
                end() {}
            }
        };
        const res = {
            end () {},
            writeHead (code) {

                expect(code).to.equal(500);
            }
        };

        const list = Actions.enforceActionList([{ action_id: 1, action: 'block_ip', parameters: { ip_cidr: '192.168.0.1/24' }, duration: 2 }]);

        expect(list).to.have.length(0);
        expect(Actions.shouldLetThisGo(req, res, '192.168.0.50')).to.be.false();


        setTimeout(() => {

            expect(Actions.shouldLetThisGo(req, res, '192.168.0.50')).to.be.true();


            const record = Record.lazyGet(req);

            expect(record.observed.sdk).to.have.length(1);
            const track = record.observed.sdk[0];

            expect(track.name).to.equal('track');
            expect(track.args[0]).to.equal('sq.action.block_ip');
            expect(track.args[1].properties).to.equal({
                action_id: 1,
                output: {
                    ip_address: '192.168.0.50'
                }
            });
            done();
        }, 3000);
    });

    it('should enforce a redirect IP action', { plan: 14, timeout: 4000 }, (done) => {

        Actions.init();

        const req = {
            socket: {
                end() {}
            }
        };
        const res = {
            end () {},
            writeHead (code, headers) {

                expect(code).to.equal(303);
                expect(headers.Location).to.equal('https://google.com')
            }
        };

        const list = Actions.enforceActionList([
            { action_id: 1, action: 'redirect_ip', parameters: { ip_cidr: '192.168.0.50', url: 'https://google.com' }, duration: 2 },
            { action_id: 1, action: 'redirect_ip', parameters: { ip_cidr: '192.168.0.50' }, duration: 2 },
            { action_id: 1, action: 'redirect_ips', parameters: { ip_cidr: '192.168.0.1/24', url: 'https://google.com' } }
        ]);

        expect(list).to.have.length(2);
        expect(Actions.shouldLetThisGo(req, res, '192.168.0.50')).to.be.false();
        res.__original_end = function () {};
        expect(Actions.shouldLetThisGo(req, res, '192.168.0.50')).to.be.false();

        setTimeout(() => {

            expect(Actions.shouldLetThisGo(req, res, '192.168.0.50')).to.be.true();

            const list2 = Actions.enforceActionList([{ action_id: 1, action: 'redirect_ip', parameters: { ip_cidr: '192.167.0.1/24', url: 'https://google.com' } }]);

            expect(list2).to.have.length(0);
            expect(Actions.shouldLetThisGo(req, res, '192.168.0.50')).to.be.true();

            const record = Record.lazyGet(req);

            expect(record.observed.sdk).to.have.length(2);
            const track = record.observed.sdk[0];

            expect(track.name).to.equal('track');
            expect(track.args[0]).to.equal('sq.action.redirect_ip');
            expect(track.args[1].properties).to.equal({
                action_id: 1,
                output: {
                    ip_address: '192.168.0.50'
                }
            });
            done();
        }, 3000);
    });
});
