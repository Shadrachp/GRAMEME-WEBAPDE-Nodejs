/**
 * Copyright (c) 2016 - 2018 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Util = require('../../../../lib/instrumentation/hooks/util');

const bind = function (fn) {

    return function () {

        try {
            return fn.apply(this, arguments);
        }
        catch (exception) {
            if (exception && typeof exception === 'object') {
                exception['error@context'] = { context: {} };
            }
            throw exception;
        }
    };
};
const shymdBind = Util._shimBind(bind);

const run = function (fn) {

    try {
        fn();
    }
    catch (exception) {
        if (exception && typeof exception === 'object') {
            exception['error@context'] = { context: {} };
        }
        throw exception;
    }
};
const shymdRun = Util._shimRun(run);

describe('utils', () => {

    describe('hasCookieParser', () => {

        it('should answer false without error', { plan: 1 }, (done) => {

            expect(Util.hasCookieParser()).to.be.false();
            done();
        });

        it('should answer false without error', { plan: 1 }, (done) => {

            const cwd = process.cwd();
            process.chdir('./test');
            expect(Util.hasCookieParser()).to.be.false();

            process.chdir(cwd);
            done();
        });

        it('should answer true without error', { plan: 1 }, (done) => {

            const Fs = require('fs');

            const cwd = process.cwd();
            process.chdir('./test');
            Fs.writeFileSync('./package.json', JSON.stringify({ dependencies: { 'cookie-parser': '10' } }));
            expect(Util.hasCookieParser()).to.be.true();
            Fs.unlinkSync('./package.json');
            process.chdir(cwd);
            done();
        });

        it('should answer true without error', { plan: 1 }, (done) => {

            const Fs = require('fs');

            const cwd = process.cwd();
            process.chdir('./test');
            Fs.writeFileSync('./package.json', JSON.stringify({ }));
            expect(Util.hasCookieParser()).to.be.false();
            Fs.unlinkSync('./package.json');
            process.chdir(cwd);
            done();
        });
    });


    describe('overCLS', () => {

        it('should run the shim for run', { plan: 1 }, (done) => {

            shymdRun(() => {

                expect(true).to.be.true();
                done();
            });
        });

        it('should run the shim for run that throws', { plan: 4 }, (done) => {

            try {
                shymdRun(() => {

                    expect(true).to.be.true();
                    throw new Error('sq');
                });
            }
            catch (err) {

                expect(err.message).to.equal('sq');
                expect(Object.keys(err)).to.include('error@context');
                expect(err['error@context']).to.not.exist();
                done();
            }
        });

        it('should run the shim for run that throws non error', { plan: 2 }, (done) => {

            try {
                shymdRun(() => {

                    expect(true).to.be.true();
                    throw 1;
                });
            }
            catch (err) {

                expect(err).to.equal(1);

                done();
            }
        });

        it('should run the shim for run that throws', { plan: 2 }, (done) => {

            try {
                shymdRun(() => {

                    expect(true).to.be.true();
                    throw null;
                });
            }
            catch (err) {

                expect(err).to.not.exist();
                done();
            }
        });

        it('should run the shim for bind', { plan: 1 }, (done) => {

            const fct = shymdBind((x) => {

                expect(x).to.equal(1);
            });

            fct(1);
            done();
        });

        it('should run the shim for bind when throwing', { plan: 4 }, (done) => {

            const fct = shymdBind((x) => {

                expect(x).to.equal(1);
                throw new Error('sq');
            });

            try {
                fct(1);
            }
            catch (err) {

                expect(err.message).to.equal('sq');
                expect(Object.keys(err)).to.include('error@context');
                expect(err['error@context']).to.not.exist();
                done();
            }
        });

        it('should run the shim for bind when throwing non error', { plan: 2 }, (done) => {

            const fct = shymdBind((x) => {

                expect(x).to.equal(1);
                throw 1;
            });

            try {
                fct(1);
            }
            catch (err) {

                expect(err).to.equal(1);
                done();
            }
        });

        it('should run the shim for bind when throwing nothing', { plan: 2 }, (done) => {

            const fct = shymdBind((x) => {

                expect(x).to.equal(1);
                throw null;
            });

            try {
                fct(1);
            }
            catch (err) {

                expect(err).to.not.exist();
                done();
            }
        });
    });

    describe('reveal', () => {

        it('should not trigger the specific part of the middleware', { plan: 0 }, (done) => {

            Util._config.reveal = false;

            Util.sqreenMiddleWare(null, null, done);
        });

        it('should trigger the specific part of the middleware', { plan: 6 }, (done) => {

            Util._config.reveal = true;

            const req = {};
            let i = 0;
            const res = {
                write(c) {

                    if (i === 0){
                        expect(c).to.equal('hello');
                    }
                    else {
                        expect(c).to.equal(undefined);
                    }
                    i++;
                },
                end(c) {

                    expect(c).to.equal('bye');
                }
            };

            Util._holder.inspectOutput = function (req_, res_, str) {

                expect(req_).to.equal(req);
                expect(res_).to.equal(res);
                expect(str).to.equal('hellobye');
                Util._config.reveal = false;
                done();
            };

            Util.sqreenMiddleWare(req, res, () => {

                res.write('hello');
                res.write();
                res.end('bye');
            });
        });


        it('should trigger the specific part of the middleware w/o end', { plan: 6 }, (done) => {

            Util._config.reveal = true;

            const req = {};
            let i = 0;
            const res = {
                write(c) {

                    if (i === 0){
                        expect(c).to.equal('hello');
                    }
                    else {
                        expect(c).to.equal(undefined);
                    }
                    i++;
                },
                end(c) {

                    expect(c).to.equal(undefined);
                }
            };

            Util._holder.inspectOutput = function (req_, res_, str) {

                expect(req_).to.equal(req);
                expect(res_).to.equal(res);
                expect(str).to.equal('hello');
                Util._config.reveal = false;
                done();
            };

            Util.sqreenMiddleWare(req, res, () => {

                res.write('hello');
                res.write();
                res.end();
            });
        });
    });
});
