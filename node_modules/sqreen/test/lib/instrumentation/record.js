'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Proxyquire = require('proxyquire');
const Utils = require('../../testUtils');
const RecordPath = '../../../lib/instrumentation/record';

describe('Record', () => {

    it('should create a record, fill it and close it', { plan: 9 }, (done) => {

        delete process.env.SQREEN_TOKEN;
        require('../../../lib/config/index').getConfig(true);

        const eventStub = {
            writeEvent: function (type, content) {

                expect(type).to.equal('request_record');
                expect(content.req).to.not.exist();
                expect(content.rulespack_id).to.equal('aaa');

                done();
            }
        };
        Utils.validateStub(require('../../../lib/events/index'), eventStub);

        const Record = Proxyquire(RecordPath, {
            '../events': eventStub
        });

        const x = {};
        x.x = x;

        const req = {
            __sqreen_uuid: 'aa',
            headers: {
                via: 'via-a1',
                'x-forwarded': '5555-5555-5555-5555',
                'x-requested-with': {
                    password: 'hello',
                    username: null
                },
                'x-client-ip': x
            }
        };

        const record = new Record.Record(req, '127.0.0.1');

        expect(Record.STORE.get(req)).to.equal(record);

        record.attack({
            rule_name: 'ruleName',
            test: true,
            block: false,
            infos: { a: 1 },
            time: new Date(),
            backtrace: (new Error('ruleName')).stack.split('\n')
        }, 'aaa');

        const err = new Error('myErr');
        record.except({
            klass: Error.name,
            message: err.message,
            infos: {
                client_ip: null,
                args: []
            },
            rule_name: 'ruleName',
            time: new Date(),
            context: {
                backtrace: err.stack.split('\n')
            }
        });

        record.observe([['HTTP_CODE', 500, 1]]);

        record.close(req);
        record.close(req);// coverage

        expect(record.request.headers).to.be.an.array();
        expect(record.request.headers[0]).to.be.an.array();
        expect(record.request.headers.find((w) => w[0] === 'via')).to.equal(['via', 'via-a1']);
        expect(record.request.headers.find((w) => w[0] === 'x-forwarded')).to.equal(['x-forwarded', '<Redacted by Sqreen>']);
        expect(record.request.headers.find((w) => w[0] === 'x-requested-with')).to.equal(['x-requested-with', {
            password: '<Redacted by Sqreen>',
            username: null
        }]);
    });

    it('should create a record, fill it and close it but not clean stuff', { plan: 9 }, (done) => {

        process.env.SQREEN_STRIP_SENSITIVE_DATA = '0';
        process.env.SQREEN_TOKEN = '0';
        require('../../../lib/config/index').getConfig(true);
        const eventStub = {
            writeEvent: function (type, content) {

                expect(type).to.equal('request_record');
                expect(content.req).to.not.exist();
                expect(content.rulespack_id).to.equal('aaa');

                delete process.env.SQREEN_TOKEN;
                process.env.SQREEN_STRIP_SENSITIVE_DATA = '1';
                done();
            }
        };
        Utils.validateStub(require('../../../lib/events/index'), eventStub);

        const Record = Proxyquire(RecordPath, {
            '../events': eventStub
        });

        const x = {};
        x.x = x;

        const req = {
            __sqreen_uuid: 'aa',
            headers: {
                via: 'via-a1',
                'x-forwarded': '5555-5555-5555-5555',
                'x-requested-with': {
                    password: 'hello',
                    username: null
                },
                'x-client-ip': x
            }
        };

        const record = new Record.Record(req, '127.0.0.1');

        expect(Record.STORE.get(req)).to.equal(record);

        record.attack({
            rule_name: 'ruleName',
            test: true,
            block: false,
            infos: { a: 1 },
            time: new Date(),
            backtrace: (new Error('ruleName')).stack.split('\n')
        }, 'aaa');

        const err = new Error('myErr');
        record.except({
            klass: Error.name,
            message: err.message,
            infos: {
                client_ip: null,
                args: []
            },
            rule_name: 'ruleName',
            time: new Date(),
            context: {
                backtrace: err.stack.split('\n')
            }
        });

        record.observe([['HTTP_CODE', 500, 1]]);

        record.close(req);
        record.close(req);// coverage

        expect(record.request.headers).to.be.an.array();
        expect(record.request.headers[0]).to.be.an.array();
        expect(record.request.headers.find((w) => w[0] === 'via')).to.equal(['via', 'via-a1']);
        expect(record.request.headers.find((w) => w[0] === 'x-forwarded')).to.equal(['x-forwarded', '5555-5555-5555-5555']);
        expect(record.request.headers.find((w) => w[0] === 'x-requested-with')).to.equal(['x-requested-with', {
            password: 'hello',
            username: null
        }]);
    });


    it('should create a record, fill it with only a metric and close it', { plan: 5 }, (done) => {

        const eventStub = {
            writeEvent: function (type, content) {

                done(new Error('should not have been called'));
            }
        };
        const metricStub = {
            addObservations: function (arg) {

                expect(arg).to.be.an.array();
                expect(arg).to.have.length(1);
                expect(arg[0]).to.be.an.array();
                expect(arg[0]).to.have.length(3);
                done();
            }
        };

        Utils.validateStub(require('../../../lib/events'), eventStub);
        Utils.validateStub(require('../../../lib/metric'), metricStub);

        const Record = Proxyquire(RecordPath, {
            '../events': eventStub,
            '../metric': metricStub
        });

        const req = {
            __sqreen_uuid: 'aa'
        };

        const record = new Record.Record(req, '127.0.0.1');

        expect(Record.STORE.get(req)).to.equal(record);

        record.observe([['HTTP_CODE', 500, 1]], new Date());

        record.close(req);
    });
});
