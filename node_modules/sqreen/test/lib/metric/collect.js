/**
 * Copyright (c) 2016 - 2018 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();
const beforeEach = lab.beforeEach;

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Mkdirp = require('mkdirp');

const Metric = require('../../../lib/metric');
let Collect = require('../../../lib/metric/collect');
const Proxyquire = require('proxyquire');

describe('Metric', () => {

    beforeEach((done) => {

        Metric._clearAllMetrics();
        Collect = require('../../../lib/metric/collect');
        done();
    });

    describe('Collect', () => {

        it('should create a collect metric', { plan: 2, timeout: 20000 }, (done) => {

            const collect = new Collect({
                kind: 'Collect',
                name: 'login-fail',
                period: 2
            });

            collect.add('key1', 1);
            collect.add('key2', 1);

            expect(Metric.getMetricByName('login-fail')).to.equal(collect);
            setTimeout(() => {

                collect.add('key1', 1);
                collect.add('key1', 1);
                collect.add('key3', 1);
            }, 3000);

            setTimeout(() => {

                collect.process();
                expect(collect.values.map((x) => x.value)).to.equal([{ 'key1': [1], 'key2': [1] }, { 'key1': [1, 1], 'key3': [1] }]);
                done();
            }, 6000);

        });

        it('should write collect metric to file', { plan: 0 }, (done) => {

            process.env.REVEAL_OUTPUT = 'probe';
            Collect.init();

            const collect = new Collect({
                kind: 'Collect',
                name: 'login-fail',
                period: 2
            });

            collect.add('key1', JSON.stringify({ injection: { uuid: 1 } }));
            done();
        });

        it('should write collect metric to HTTP endpoint', { plan: 3 }, (done) => {

            process.env.REVEAL_OUTPUT = 'https://sqreen.io';
            Collect.init();

            Collect = Proxyquire('../../../lib/metric/collect', {
                '../backend/wreckAsPromised': {
                    POST: function (uri, options, pl) {

                        expect(uri).to.equal('https://sqreen.io');
                        expect(options).to.equal({});
                        expect(pl).to.exist();
                        done();
                        return Promise.resolve();
                    }
                }
            });
            const collect = new Collect({
                kind: 'Collect',
                name: 'login-fail',
                period: 2
            });

            collect.add('key1', JSON.stringify({ injection: { uuid: 1 } }));
        });


        it('should not write collect metric to file', { plan: 0 }, (done) => {


            const collect = new Collect({
                kind: 'Collect',
                name: 'login-fail',
                period: 2
            });

            const mkdirP = Mkdirp.mkdirP;
            Mkdirp.mkdirP = function (x, cb) {

                return cb(new Error('err'));
            };

            process.env.REVEAL_OUTPUT = 'probe';
            collect.add('key1', JSON.stringify({ injection: { uuid: 2 } }));

            Mkdirp.mkdirP = mkdirP;
            done();
        });


        it('should not write collect metric to file', { plan: 0 }, (done) => {

            process.env.REVEAL_OUTPUT = 'probe';
            Collect.init();
            const collect = new Collect({
                kind: 'Collect',
                name: 'login-fail',
                period: 2
            });

            collect.add('key1', JSON.stringify({ injection: { uuid: '../../../random/xx.json' } }));

            done();
        });
    });
});
