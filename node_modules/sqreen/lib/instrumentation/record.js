/**
 * Copyright (c) 2016 - 2018 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const ReportUtil = require('./reportUtil');
const Util = require('../util');
const Rules = require('../rules');
const Metric = require('../metric');
const Events = require('../events');
const TYPE = require('../enums/events').TYPE;
const SDK_TYPE = require('../enums/sdk').TYPE;
const FORMAT_VERSION = '20171208';

const STORE = module.exports.STORE = new WeakMap();

const Record = class {

    constructor(req, client_ip) { // TODO: remove req to avoid storing in closure?

        this.version = FORMAT_VERSION;
        this.rulespack_id = Rules.rulespack;
        this.client_ip = client_ip || Util.getXFFOrRemoteAddress(req);
        this.request = {};
        // this.response = {}; // TODO: future
        this.observed = {
            attacks: [],
            sqreen_exceptions: [],
            observations: [],
            // TODO: add agent_message here and spec it too
            sdk: []
        };
        this.identity = null;

        this.isClosed = false;
        this.mustReport = false;

        STORE.set(req, this);
        this.user = null;
    }

    attack(atk, rpid) {

        if (rpid) {
            this.rulespack_id = rpid;
        }
        this.observed.attacks.push(atk);
    }

    except(exc) {

        this.observed.sqreen_exceptions.push(exc);
    }

    observe(observationList, date) {

        date = date || new Date();
        for (let i = 0; i < observationList.length; ++i) {
            this.observed.observations.push({
                category: observationList[i][0],
                key: observationList[i][1],
                value: observationList[i][2],
                time: date
            });
        }
    }

    identify(record, traits) {

        this.identity = record;
        this.user = record;
        return this.addSDK(SDK_TYPE.IDENTIFY, [record, traits]);
    }

    addSDK(name, args) {

        let time;
        if (name === SDK_TYPE.TRACK) {
            this.mustReport = true;
            time = args[1].timestamp;
        }
        else {
            time = new Date();
        }
        this.observed.sdk.push({ time, name, args });
    }

    shouldReport() {

        return this.observed.attacks.length > 0 || this.observed.sqreen_exceptions.length > 0;
    }

    reportMetric() {

        this.observed.observations.forEach((x) => {

            Metric.addObservations([[x.category, x.key, x.value]], x.time);
        });
    }

    report(req) {

        if (this.mustReport || this.shouldReport()) {
            this.request = ReportUtil.mapRequestAndArrayHeaders(req);
            Events.writeEvent(TYPE.REQUEST_RECORD, this);
            return;
        }
        return this.reportMetric();
    }

    close(req) {

        this.user = null;

        if (this.isClosed) {
            return;
        }

        if (this.identity !== null) {
            this.observed.sdk.forEach((item) => {

                if (item.name !== SDK_TYPE.TRACK) {
                    return;
                }
                item.args[1] = item.args[1] || {};
                if (!item.args[1].user_identifiers) {
                    item.args[1].user_identifiers = this.identity;
                }
            });
        }

        this.isClosed = true;
        this.report(req);
        STORE.delete(req);
    }
};

module.exports.Record = Record;
module.exports.lazyGet = function (req) {

    if (req === undefined || !req) {
        return null;
    }
    const current = STORE.get(req);
    if (current === undefined) {
        return new Record(req);
    }
    return current;
};
